2. Find three examples of source code in the internet for the following vulnerability conditions and provide mitigation / protection mechanism

	BUFFER OVERFLOW :

Program 1 :

#include <unistd.h>
 
void Test()
{
   char buff[4];
   printf("Some input: ");
   gets(buff);
   puts(buff);
}
 
int main(int argc, char *argv[ ])
{
   Test();
   return 0;
}


Program 2 :

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
 
int main(int argc, char *argv[])
{
       // theoretically reserve 5 byte of buffer plus the
       // terminating NULL....should allocate 8 bytes = 2 double words,
       // to overflow, need more than 8 bytes...
       // so, if more than 8 characters input by user,
       // there will be access violation, segmentation fault etc.
       char mybuffer[5];
       // a prompt how to execute the program...
       if (argc < 2)
       {
              printf("strcpy() NOT executed....\n");
              printf("Syntax: %s <characters>\n", argv[0]);
              exit(0);
       }
     
       // copy the user input to mybuffer, without any bound checking
       // a secure version is srtcpy_s()
       strcpy(mybuffer, argv[1]);
       printf("mybuffer content= %s\n", mybuffer);
       // you may want to try strcpy_s()
       printf("strcpy() executed...\n");
       return 0;
}


Program 3 :

/*
  StackOverrun.c
  This program shows an example of how a stack-based 
  buffer overrun can be used to execute arbitrary code.  Its 
  objective is to find an input string that executes the function bar.
*/

#pragma check_stack(off)

#include <string.h>
#include <stdio.h> 

void foo(const char* input)
{
    char buf[10];

    printf("My stack looks like:\n%p\n%p\n%p\n%p\n%p\n% p\n\n");

    strcpy(buf, input);
    printf("%s\n", buf);

    printf("Now the stack looks like:\n%p\n%p\n%p\n%p\n%p\n%p\n\n");
}

void bar(void)
{
    printf("Augh! I've been hacked!\n");
}

int main(int argc, char* argv[])
{
    //Blatant cheating to make life easier on myself
    printf("Address of foo = %p\n", foo);
    printf("Address of bar = %p\n", bar);
    if (argc != 2) 
 {
        printf("Please supply a string as an argument!\n");
        return -1;
	} 
foo(argv[1]);
    return 0;
}




Mitigation and protection mechanisms :

Various techniques have been used to detect or prevent buffer overflows, with various tradeoffs. The most reliable way to avoid or prevent buffer overflows is to use automatic protection at the language level.The various protection mechanisms are:

a) Choice of programming language
b) Use of safe libraries
c) Buffer overflow protection
d) Pointer protection
e) Executable space protection

In most of the programs above the gets, puts, strcpy, printf etc functions are made use of. This severly lays way for exploitation.

The problem of buffer overflows is common in the C and C++ languages because they expose low level representational details of buffers as containers for data types. Buffer overflows must thus be avoided by maintaining a high degree of correctness in code which performs buffer management. It has also long been recommended to avoid standard library functions which are not bounds checked, such as gets, scanf and strcpy. The Morris worm exploited a gets call in fingerd.

Ultimately, the best defense is to not write code that is exploitable. Only safe string function calls should be used, strcpy and sprintf do not belong in code. Some programming languages enforce more secure code, but typically still allow unsafe constructs.

One lesson to draw for the programmer (or her manager) is that user input is far too dangerous to be left to users. Thus, all input should be treated as evil and corrupting unless proven otherwise. Second, a programmer needs to set up trusted and untrusted environments, and data needs to be checked whenever it crosses the boundary. The checking is easiest if there is a choke point for input. One should also consider the use of an input validator. Finally, run applications at the least possible privilege level.